const t = e.data[0] | e.data[1] << 8
 , i = new y;
return i.signalId = t,
       i.valueTypeIdentifier = e.data[3] | e.data[4] << 8,
       i.value = this._getValue(t, e.data, 5), i
       
            _getValue(e, t, i) {
                const s = new Uint8Array(t)
                  , n = new DataView(s.buffer);
                let a = g.int32;
                if (this.useChannelItems) {
                    const t = this._nmeaSignalInfoMap.get(e);
                    a = null != t ? t.dataType : g.int32
                }
                switch (a) {
                case g.int8:
                    return n.getInt8(i);
                case g.uint8:
                    return n.getUint8(i);
                case g.int16:
                    return n.getInt16(i, !0);
                case g.uint16:
                    return n.getUint16(i, !0);
                case g.int32:
                    return n.getInt32(i, !0);
                case g.uint32:
                    return n.getUint32(i, !0);
                case g.int64:
                    return new Number(n.getBigInt64(i, !0)).valueOf();
                case g.uint64:
                    return new Number(n.getBigUint64(i, !0)).valueOf()
                }
            }

----------------------------------------------------------------------------------------

Example WS pull (fuellevel):
{"data":[1,5,3,135,20,0,0,0,0,0,0,0],"messagecmd":64,"messagetype":32,"size":12}
var fuelPercentage = (data[3] | data[4] << 8) / 50;


Increase (set/get) alarm (incrementally)
{"data":[2,0,1],"messagecmd":1,"messagetype":17,"size":3}
{"data":[2,0,0],"messagecmd":1,"messagetype":17,"size":3}

Decrease alarm, incrementally
{"data":[3,0,1],"messagecmd":1,"messagetype":17,"size":3}
{"data":[3,0,0],"messagecmd":1,"messagetype":17,"size":3}


Set specific alarm
{"messagetype":17,"messagecmd":3,"size":5,"data":[4,0,0,60,0]}

(Rounds down to nearest 10 whatever is sent and sends back the rounded value to every client. \
I.e. set to 66 -> 60 is set)


Reset alarm:
{"messagetype":17,"messagecmd":1,"size":3,"data":[6,0,1]}
{"messagetype":17,"messagecmd":1,"size":3,"data":[6,0,0]}




----------------------------------------------------------------------------------------



class I {
            static receivedWduHeartbetAckCommand() {
                return {
                    messagetype: l.acknowledgement,
                    messagecmd: c.acknowledgementAck,
                    size: 1,
                    data: [0]
                }
            }
            static requestWduInfoCommand() {
                return {
                    messagetype: 49,
                    messagecmd: 1,
                    size: 3,
                    data: [0, 0, 0]
                }
            }
            static momentaryCommand(e, t) {
                return {
                    messagetype: 17,
                    messagecmd: 1,
                    size: 3,
                    data: [e, e >> 8, t ? 1 : 0]
                }
            }
            static toggleCommand(e, t, i, s) {
                let n = 0;
                return t && (n |= 1),
                i && (n |= 2),
                s && (n |= 4),
                {
                    messagetype: 17,
                    messagecmd: 0,
                    size: 3,
                    data: [e, e >> 8, n]
                }
            }
            static dimmerCommand(e, t, i) {
                return {
                    messagetype: 17,
                    messagecmd: 3,
                    size: 5,
                    data: [e, e >> 8, i, 255 & t, t >> 8 & 255]
                }
            }